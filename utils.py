from functools import lru_cache

@lru_cache(maxsize=None)
def edit_distance(s1, s2):
    """The Levenshtein distance between two strings."""
    # code generated by Github Copilot
    m, n = len(s1), len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j],
                                   dp[i][j - 1],
                                   dp[i - 1][j - 1])
    return dp[m][n]

@lru_cache(maxsize=None)
def string_dissimilarity(s1, s2):
    """The dissimilarity of two strings. Edit distance over average length.
    
    Examples:
    anpa nanpa = 1/4.5 = 0.22
    kama kala = 1/4 = 0.25
    mama wawa = 2/4 = 0.50
    tawa kasi = 3/4 = 0.75
    telo musi = 4/4 = 1.00
    a sitelen = 7/4 = 1.75
    """
    return edit_distance(s1, s2) / ((len(s1) + len(s2)) / 2)