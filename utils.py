def edit_distance(s1, s2):
    """The Levenshtein distance between two strings."""
    # code generated by Github Copilot
    m, n = len(s1), len(s2)
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    for i in range(m + 1):
        dp[i][0] = i
    for j in range(n + 1):
        dp[0][j] = j
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if s1[i - 1] == s2[j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j],
                                   dp[i][j - 1],
                                   dp[i - 1][j - 1])
    return dp[m][n]

def longest_common_subsequence(s1, s2):
    """Length of the longest common subsequence between two strings."""
    if len(s1) < len(s2):
        return longest_common_subsequence(s2, s1)
    previous_row = [0] * (len(s2) + 1)
    for c1 in s1:
        current_row = [0]
        for j, c2 in enumerate(s2):
            if c1 == c2:
                current_row.append(previous_row[j] + 1)
            else:
                current_row.append(max(current_row[-1], previous_row[j + 1]))
        previous_row = current_row
    return previous_row[-1]

def similarity(s1, s2):
    """Longest common subsequence over the length of the longer word, squared.
    
    Result is a float from 0 (no common subsequence) to 1 (identical).
    """
    lcs = longest_common_subsequence(s1, s2)
    longer = max(len(s1), len(s2))
    return (lcs / longer) ** 2